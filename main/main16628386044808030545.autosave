import processing.video.*;
import processing.sound.*;
import spout.*;

Spout spout;

// video
Movie myVideo;
PImage img;
float duration;

// particles 
int maxParticles = 50000;
int noiseAmount = 800;
Particle[] particles = new Particle[maxParticles];

Poem[] poems;
int activePoem = 0;

// music
SoundFile one, two, three, four, five, six, seven, eight, nine, ten;
Amplitude one_amp, two_amp, three_amp, four_amp, five_amp, six_amp, seven_amp, eight_amp, nine_amp, ten_amp;

// emotions
float input;
int input_delta = 1, input_theta = 1, input_low_alpha = 1, input_high_alpha = 1, input_low_beta = 1, input_high_beta = 1, input_low_gamma = 1, input_mid_gamma = 1;
float emotion_val;
float emotionAverage = 2;
float[] emotionValues;
float peek = 0;

void setup() {
  size(5760, 1080, P2D);
  frameRate(24);
  background(0);
  
  // set poems
  Amplitude[] amps1 = { 
    new Amplitude(new SoundFile(this, "data/01.wav"), .1, .005), 
    new Amplitude(new SoundFile(this, "data/02.wav"), .5, .005),
    new Amplitude(new SoundFile(this, "data/03.wav"), .8, .005),
    new Amplitude(new SoundFile(this, "data/04.wav"), 1.1, .005),
    new Amplitude(new SoundFile(this, "data/05.wav"), 1.4, .005),
    new Amplitude(new SoundFile(this, "data/06.wav"), 1.7, .005)
  };
  
  Amplitude[] amps2 = { 
    new Amplitude(new SoundFile(this, "data/01.wav"), .1, .005), 
    new Amplitude(new SoundFile(this, "data/02.wav"), .5, .005),
    new Amplitude(new SoundFile(this, "data/03.wav"), .8, .005),
    new Amplitude(new SoundFile(this, "data/04.wav"), 1.1, .005),
    new Amplitude(new SoundFile(this, "data/05.wav"), 1.4, .005),
    new Amplitude(new SoundFile(this, "data/06.wav"), 1.7, .005),
  };
  
  Amplitude[] amps3 = { 
    new Amplitude(new SoundFile(this, "data/01.wav"), .1, .005), 
    new Amplitude(new SoundFile(this, "data/02.wav"), .5, .005),
    new Amplitude(new SoundFile(this, "data/03.wav"), .8, .005),
    new Amplitude(new SoundFile(this, "data/04.wav"), 1.1, .005),
    new Amplitude(new SoundFile(this, "data/05.wav"), 1.4, .005),
    new Amplitude(new SoundFile(this, "data/06.wav"), 1.7, .005),
  };
  
  Amplitude[] amps4 = { 
    new Amplitude(new SoundFile(this, "data/01.wav"), .1, .005), 
    new Amplitude(new SoundFile(this, "data/02.wav"), .5, .005),
    new Amplitude(new SoundFile(this, "data/03.wav"), .8, .005),
    new Amplitude(new SoundFile(this, "data/04.wav"), 1.1, .005),
    new Amplitude(new SoundFile(this, "data/05.wav"), 1.4, .005),
    new Amplitude(new SoundFile(this, "data/06.wav"), 1.7, .005),
  };
  
  Amplitude[] amps5 = { 
    new Amplitude(new SoundFile(this, "data/01.wav"), .1, .005), 
    new Amplitude(new SoundFile(this, "data/02.wav"), .5, .005),
    new Amplitude(new SoundFile(this, "data/03.wav"), .8, .005),
    new Amplitude(new SoundFile(this, "data/04.wav"), 1.1, .005),
    new Amplitude(new SoundFile(this, "data/05.wav"), 1.4, .005),
    new Amplitude(new SoundFile(this, "data/06.wav"), 1.7, .005),
  };
  
  poems[0] = new Poem(this, "final.mp4", amps1);
  poems[1] = new Poem(this, "video.mp4", amps2);
  poems[2] = new Poem(this, "final.mp4", amps3);
  poems[3] = new Poem(this, "video.mp4", amps4);
  poems[4] = new Poem(this, "final.mp4", amps5);
 
  // video
  myVideo = poems[activePoem].video;
  myVideo.play();
  duration = myVideo.duration();

  // particles
  for (int i = 0; i < maxParticles; i++) {
    particles[i] = new Particle(random(0, width), random(0, height));
  }


  emotionValues = new float[10];

  // spout
  // ENABLE: spout = new Spout(this);
  // ENABLE: spout.createSender("sketch");
}

void mousePressed() {
  myVideo.jump(0);
}

void draw() {
  if (myVideo.time() > duration - 10 && emotionAverage > .1) {
    emotionAverage -= .1;
  }
  
  //for (int i = 0; i < poems[activePoem].tracks.length; i = i+1) {
      // poems[activePoem].tracks[i].update();
  // }
  
  if (myVideo.available()) {
    myVideo.read();
    myVideo.loadPixels();
   
    tint(255, 0);
   
    image(myVideo, 0, 0);
    img = myVideo.get();
   
    if (img != null) {
      noStroke();
      smooth();
     
      for (int i = 0; i < maxParticles; i++) {
        float radius = map(emotionAverage, 0, 5, 3, 2);
        float angleFactor = map(emotionAverage, 0, 5, TWO_PI, PI);
        float iterations = map(i, 0, maxParticles, 5, 1);
        particles[i].update(noiseAmount, angleFactor, iterations, emotionAverage);
        particles[i].display(radius, img, 1);
        particles[i].edge();
      }
    }
  }

  // ENABLE: spout.sendTexture();

  if (peek >= .05) {
    peek -= .05;
  }
}

void stop() {
  super.stop();
}
